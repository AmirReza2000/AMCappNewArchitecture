// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.SqlServer.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Features.Common.BaseTable", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("InsertDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTestData")
                        .HasColumnType("bit");

                    b.Property<int>("Ordering")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("BaseTables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("120c6ba8-50c4-4c19-ae4b-705d770323c5"),
                            Code = 1100,
                            InsertDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(161), new TimeSpan(0, 3, 30, 0, 0)),
                            IsActive = true,
                            IsSynced = false,
                            IsTestData = false,
                            Ordering = 10000,
                            Type = 0,
                            UpdateDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(161), new TimeSpan(0, 3, 30, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Features.Common.BaseTableItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseTableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("InsertDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTestData")
                        .HasColumnType("bit");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Ordering")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BaseTableId");

                    b.ToTable("BaseTableItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("29d863fe-8504-4a9e-8cd2-8efc2bfaaee2"),
                            BaseTableId = new Guid("120c6ba8-50c4-4c19-ae4b-705d770323c5"),
                            Code = 0,
                            InsertDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(321), new TimeSpan(0, 3, 30, 0, 0)),
                            IsActive = true,
                            IsSynced = false,
                            IsTestData = false,
                            KeyName = "SimpleUser",
                            Ordering = 1000,
                            UpdateDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(321), new TimeSpan(0, 3, 30, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("c2539a70-ad1c-4c89-8bea-eaeb81615ff9"),
                            BaseTableId = new Guid("120c6ba8-50c4-4c19-ae4b-705d770323c5"),
                            Code = 300,
                            InsertDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(361), new TimeSpan(0, 3, 30, 0, 0)),
                            IsActive = true,
                            IsSynced = false,
                            IsTestData = false,
                            KeyName = "Administrator",
                            Ordering = 4000,
                            UpdateDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(361), new TimeSpan(0, 3, 30, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("210262a3-b878-4fea-ae21-1cd3be57d355"),
                            BaseTableId = new Guid("120c6ba8-50c4-4c19-ae4b-705d770323c5"),
                            Code = 400,
                            InsertDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(379), new TimeSpan(0, 3, 30, 0, 0)),
                            IsActive = true,
                            IsSynced = false,
                            IsTestData = false,
                            KeyName = "ApplicationOwner",
                            Ordering = 5000,
                            UpdateDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(379), new TimeSpan(0, 3, 30, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("b7bb7615-1d74-452c-a3a0-e85076b04c20"),
                            BaseTableId = new Guid("120c6ba8-50c4-4c19-ae4b-705d770323c5"),
                            Code = 900,
                            InsertDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(397), new TimeSpan(0, 3, 30, 0, 0)),
                            IsActive = true,
                            IsSynced = false,
                            IsTestData = false,
                            KeyName = "Programmer",
                            Ordering = 6000,
                            UpdateDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(397), new TimeSpan(0, 3, 30, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Features.Identity.LoginLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("InsertDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LoginType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LogoutDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserIP")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserIP");

                    b.HasIndex("UserId");

                    b.ToTable("LoginLogs");
                });

            modelBuilder.Entity("Domain.Features.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CellPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("CellPhoneNumberVerificationKey")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<DateTimeOffset>("InsertDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCellPhoneNumberVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUndeletable")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastChangePasswordDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastLoginDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Ordering")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(44)
                        .IsUnicode(false)
                        .HasColumnType("varchar(44)");

                    b.Property<string>("RegisterIP")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SecurityKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CellPhoneNumber")
                        .IsUnique();

                    b.HasIndex("NationalCode")
                        .IsUnique()
                        .HasFilter("[NationalCode] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("335d69bd-71af-48be-a998-ea6b781a6401"),
                            CellPhoneNumber = "09903333615",
                            InsertDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(418), new TimeSpan(0, 3, 30, 0, 0)),
                            IsActive = true,
                            IsCellPhoneNumberVerified = true,
                            IsUndeletable = true,
                            LastChangePasswordDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(556), new TimeSpan(0, 3, 30, 0, 0)),
                            Ordering = 1000,
                            Password = "aeLSS3ibnGMK3yHluBGVdWDZWKt/AT0qtfbblLEDVkY=",
                            RegisterIP = "::1",
                            RoleId = new Guid("b7bb7615-1d74-452c-a3a0-e85076b04c20"),
                            SecurityKey = new Guid("326f8ede-eb0d-4e2e-ba3b-3e08a204a194"),
                            UpdateDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(418), new TimeSpan(0, 3, 30, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("542be3a5-fece-4e3c-98e7-b6e930603367"),
                            CellPhoneNumber = "09905956472",
                            InsertDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(594), new TimeSpan(0, 3, 30, 0, 0)),
                            IsActive = true,
                            IsCellPhoneNumberVerified = true,
                            IsUndeletable = true,
                            LastChangePasswordDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(609), new TimeSpan(0, 3, 30, 0, 0)),
                            Ordering = 1000,
                            Password = "0cMQPZLYG+DUWiIBTlivf/Jp5g+Y7BRnW/uTnTdjSWE=",
                            RegisterIP = "::1",
                            RoleId = new Guid("b7bb7615-1d74-452c-a3a0-e85076b04c20"),
                            SecurityKey = new Guid("b371ae0c-8d6f-4da6-9e94-21a07ed76734"),
                            UpdateDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(594), new TimeSpan(0, 3, 30, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("cec20a1a-f4d3-4381-abcb-10e24435bfe3"),
                            CellPhoneNumber = "09905881865",
                            InsertDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(631), new TimeSpan(0, 3, 30, 0, 0)),
                            IsActive = true,
                            IsCellPhoneNumberVerified = true,
                            IsUndeletable = true,
                            LastChangePasswordDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(640), new TimeSpan(0, 3, 30, 0, 0)),
                            Ordering = 1000,
                            Password = "0cMQPZLYG+DUWiIBTlivf/Jp5g+Y7BRnW/uTnTdjSWE=",
                            RegisterIP = "::1",
                            RoleId = new Guid("b7bb7615-1d74-452c-a3a0-e85076b04c20"),
                            SecurityKey = new Guid("c12b4a5a-3557-4552-8143-e9d832d57f06"),
                            UpdateDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(631), new TimeSpan(0, 3, 30, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("9802378a-eba8-44f8-9b15-c2f0e305d67a"),
                            CellPhoneNumber = "09205956472",
                            InsertDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(659), new TimeSpan(0, 3, 30, 0, 0)),
                            IsActive = true,
                            IsCellPhoneNumberVerified = false,
                            IsUndeletable = true,
                            LastChangePasswordDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(668), new TimeSpan(0, 3, 30, 0, 0)),
                            Ordering = 1000,
                            Password = "0cMQPZLYG+DUWiIBTlivf/Jp5g+Y7BRnW/uTnTdjSWE=",
                            RegisterIP = "::1",
                            RoleId = new Guid("b7bb7615-1d74-452c-a3a0-e85076b04c20"),
                            SecurityKey = new Guid("f67db87d-0942-44e0-a7a8-623fa5bcef12"),
                            UpdateDateTime = new DateTimeOffset(new DateTime(2024, 3, 14, 15, 22, 28, 789, DateTimeKind.Unspecified).AddTicks(659), new TimeSpan(0, 3, 30, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Features.Common.BaseTableItem", b =>
                {
                    b.HasOne("Domain.Features.Common.BaseTable", "BaseTable")
                        .WithMany("BaseTableItems")
                        .HasForeignKey("BaseTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTable");
                });

            modelBuilder.Entity("Domain.Features.Identity.LoginLog", b =>
                {
                    b.HasOne("Domain.Features.Identity.User", "User")
                        .WithMany("LoginLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Features.Identity.User", b =>
                {
                    b.HasOne("Domain.Features.Common.BaseTableItem", "Role")
                        .WithMany("Users_Role")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Features.Common.BaseTable", b =>
                {
                    b.Navigation("BaseTableItems");
                });

            modelBuilder.Entity("Domain.Features.Common.BaseTableItem", b =>
                {
                    b.Navigation("Users_Role");
                });

            modelBuilder.Entity("Domain.Features.Identity.User", b =>
                {
                    b.Navigation("LoginLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
